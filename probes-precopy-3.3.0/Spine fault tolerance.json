{
  "label": "Spine fault tolerance",
  "description": "Find out if failure of given number of spines in the fabric is going to be tolerated. Raise anomaly if total traffic on all spines is more than the available spine capacity, with the specified number of spine failures.",
  "processors": [
    {
      "inputs": {},
      "type": "if_counter",
      "name": "Interface rx bps",
      "outputs": {
        "out": "Interface rx bps"
      },
      "properties": {
        "description": "intf.description",
        "graph_query": "match(node('system', name='system', system_id=not_none(), role='spine').out('hosted_interfaces').node('interface', name='intf', if_name=not_none()).out('link').node('link', role='spine_leaf', name='link').in_('link').node('interface').in_('hosted_interfaces').node('system', role='leaf', system_id=not_none()))",
        "interface": "intf.if_name",
        "system_id": "system.system_id",
        "enable_streaming": false,
        "counter_type": "rx_bps"
      }
    },
    {
      "inputs": {
        "in": "Interface rx bps"
      },
      "type": "periodic_average",
      "name": "Average interface rx bps",
      "outputs": {
        "out": "Average interface rx bps"
      },
      "properties": {
        "enable_streaming": false,
        "period": 60,
        "graph_query": []
      }
    },
    {
      "inputs": {
        "in": "Average interface rx bps"
      },
      "type": "sum",
      "name": "Total spine rx bps",
      "outputs": {
        "out": "Total spine rx bps"
      },
      "properties": {
        "enable_streaming": false,
        "group_by": []
      }
    },
    {
      "inputs": {
        "in": "Total spine rx bps"
      },
      "type": "accumulate",
      "name": "History of Total spine rx bps",
      "outputs": {
        "out": "History of Total spine rx bps"
      },
      "properties": {
        "enable_streaming": false,
        "max_samples": 1024,
        "graph_query": [],
        "total_duration": 0
      }
    },
    {
      "inputs": {
        "in": "History of Total spine rx bps"
      },
      "type": "range_check",
      "name": "Check fault tolerance threshold",
      "outputs": {
        "out": "Traffic exceeds fault tolerance threshold"
      },
      "properties": {
        "enable_streaming": false,
        "property": "value",
        "range": {
          "min": "(len({qr['system'].system_id for qr in query_result}) - 1) * sum([functions.speed_to_bits(qr['link'].speed, default=0) for qr in query_result if qr['system'].system_id == query_result[0]['system'].system_id])"
        },
        "raise_anomaly": true,
        "graph_query": [
          "match(node('system', name='system', system_id=not_none(), role='spine').out('hosted_interfaces').node('interface', name='intf', if_name=not_none()).out('link').node('link', role='spine_leaf', name='link').in_('link').node('interface').in_('hosted_interfaces').node('system', role='leaf', system_id=not_none()))"
        ]
      }
    },
    {
      "inputs": {
        "in": "Traffic exceeds fault tolerance threshold"
      },
      "type": "accumulate",
      "name": "History of traffic threshold anomaly",
      "outputs": {
        "out": "History of traffic threshold anomaly"
      },
      "properties": {
        "enable_streaming": false,
        "max_samples": 1024,
        "graph_query": [],
        "total_duration": 0
      }
    }
  ],
  "stages": [
    {
      "name": "Interface rx bps",
      "description": "spine interfaces facing leaf interfaces that are part of the fabric. Value is ingress bits per second",
      "units": "bps"
    },
    {
      "name": "Traffic exceeds fault tolerance threshold",
      "description": "Raises anomaly if total spine bandwidth exceeds available capacity, considering fault tolerance"
    }
  ]
}