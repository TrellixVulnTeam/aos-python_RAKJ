{
  "label": "Interface policy 802.1x",
  "description": "Obtain telemetry status for interfaces that are activated for interface policies defining 802.1x port control.",
  "processors": [
    {
      "inputs": {},
      "type": "extensible_data_collector",
      "name": "802.1x Authorization status",
      "outputs": {
        "out": "802.1x Authorization status"
      },
      "properties": {
        "data_type": "ts",
        "graph_query": "match(\n  node('interface_policy', name='interface_policy',\n                           dot1x_port_control=is_in(['auto', 'force_unauthorized']))\n  .in_('interface_policy')\n  .node('interface', name='interface'),\n  node('system', name='system', deploy_mode='deploy', role='leaf')\n  .out('hosted_interfaces')\n  .node('interface', name='interface')\n  .out('link')\n  .node('link')\n  .in_('link')\n  .node('interface')\n  .in_('hosted_interfaces')\n  .node('system', name='remote_system', role='l2_server')\n).ensure_different('system', 'remote_system')",
        "service_interval": "120",
        "keys": [
          "interface",
          "type"
        ],
        "service_name": "dot1x",
        "execution_count": "-1",
        "dot1x_port_control": "interface_policy.dot1x_port_control",
        "service_input": "\"\"",
        "type": "\"Auth\"",
        "enable_streaming": false,
        "system_id": "system.system_id",
        "interface": "interface.if_name",
        "ingestion_filter": {}
      }
    },
    {
      "inputs": {},
      "type": "extensible_data_collector",
      "name": "802.1x Authorized MACs",
      "outputs": {
        "out": "802.1x Authorized MACs"
      },
      "properties": {
        "data_type": "ts",
        "graph_query": "match(\n  node('interface_policy', name='interface_policy',\n                           dot1x_port_control=is_in(['auto', 'force_unauthorized']))\n  .in_('interface_policy')\n  .node('interface', name='interface'),\n  node('system', name='system', deploy_mode='deploy', role='leaf')\n  .out('hosted_interfaces')\n  .node('interface', name='interface')\n  .out('link')\n  .node('link')\n  .in_('link')\n  .node('interface')\n  .in_('hosted_interfaces')\n  .node('system', name='remote_system', role='l2_server')\n).ensure_different('system', 'remote_system')",
        "service_interval": "120",
        "keys": [
          "interface",
          "type"
        ],
        "service_name": "dot1x",
        "execution_count": "-1",
        "system_id": "system.system_id",
        "service_input": "\"\"",
        "type": "\"Mac\"",
        "enable_streaming": false,
        "interface": "interface.if_name",
        "ingestion_filter": {}
      }
    },
    {
      "inputs": {},
      "type": "service_data_collector",
      "name": "802.1x Interface status",
      "outputs": {
        "out": "802.1x Interface status"
      },
      "properties": {
        "deploy_mode": "remote_system.deploy_mode",
        "graph_query": "match(\n  node('interface_policy', name='interface_policy',\n                           dot1x_port_control=is_in(['auto', 'force_unauthorized']))\n  .in_('interface_policy')\n  .node('interface', name='interface'),\n  node('system', name='system', deploy_mode='deploy', role='leaf')\n  .out('hosted_interfaces')\n  .node('interface', name='interface')\n  .out('link')\n  .node('link')\n  .in_('link')\n  .node('interface')\n  .in_('hosted_interfaces')\n  .node('system', name='remote_system', role='l2_server')\n).ensure_different('system', 'remote_system')",
        "service_name": "interface",
        "remote_system": "remote_system.label or remote_system.hostname",
        "if_name": "interface.if_name",
        "system_id": "system.system_id",
        "key": "interface.if_name",
        "enable_streaming": false
      }
    },
    {
      "inputs": {},
      "type": "extensible_data_collector",
      "name": "802.1x hosts",
      "outputs": {
        "out": "802.1x hosts"
      },
      "properties": {
        "data_type": "table_dss",
        "graph_query": "node('system', role='leaf', name='system').having(\n  node('system', name='system')\n  .out('hosted_interfaces')\n  .node('interface')\n  .out('interface_policy')\n  .node('interface_policy',\n        dot1x_port_control=is_in(['auto', 'force_unauthorized'])),\n  at_least=1\n) ",
        "service_interval": "120",
        "keys": [],
        "service_name": "dot1x_hosts",
        "execution_count": "-1",
        "system_id": "system.system_id",
        "service_input": "\"\"",
        "enable_streaming": false,
        "value_map": {
          "0": "blocked",
          "1": "authorized"
        },
        "ingestion_filter": {}
      }
    },
    {
      "inputs": {
        "in": "802.1x Authorization status"
      },
      "type": "match_string",
      "name": "802.1x Expected authorization status",
      "outputs": {
        "out": "802.1x Expected authorization status"
      },
      "properties": {
        "enable_streaming": false,
        "regexp": "\"authorized\" if context.dot1x_port_control=='auto' else \"blocked\"",
        "raise_anomaly": false,
        "graph_query": [
          "node('interface_policy', name='interface_policy')"
        ]
      }
    },
    {
      "inputs": {
        "in": "802.1x Expected authorization status"
      },
      "type": "time_in_state_check",
      "name": "802.1x dot1x_port_control auto anomalies over 30 seconds",
      "outputs": {
        "out": "Unexpected 802.1x authentication status"
      },
      "properties": {
        "enable_streaming": false,
        "time_window": 60,
        "state_range": {
          "\"false\"": [
            {
              "min": 30
            }
          ]
        },
        "raise_anomaly": true,
        "graph_query": []
      }
    },
    {
      "inputs": {
        "in": "802.1x Expected authorization status"
      },
      "type": "accumulate",
      "name": "802.1x port control expected status timeout",
      "outputs": {
        "out": "802.1x port control expected status timeout"
      },
      "properties": {
        "enable_streaming": false,
        "max_samples": 1024,
        "graph_query": [],
        "total_duration": 0
      }
    }
  ],
  "stages": [
    {
      "name": "802.1x hosts",
      "description": "This processor includes a data dump of 802.1x authenticated hosts, authorization status, and VLAN assignment as pertaining to dynamic VLAN assignment.  This output is per-MAC (Supplicant) specific."
    },
    {
      "name": "Unexpected 802.1x authentication status",
      "description": "An anomaly is raised only if the interface is in an unexpected state for over 30 seconds, to account for transition states during authentication."
    },
    {
      "name": "802.1x Interface status",
      "description": "Displays current interface link status relevant to 802.1x interfaces only.  Meant for correlation between interface status and dot1x status, to raise an anomaly only if the actual port is up."
    },
    {
      "name": "802.1x Authorized MACs",
      "description": "Indicates the first MAC address that is present on the 802.1x enabled port."
    },
    {
      "name": "802.1x Authorization status",
      "description": "Collect 802.1x actual authorization status from interfaces that are dot1x_port_control 'auto' or 'force_unauthorized', for interfaces that use 802.1x PAE features."
    },
    {
      "name": "802.1x port control expected status timeout",
      "description": "Collects dot1x port control status of interfaces over a period of time, to assist user in troubleshooting flapping issues"
    },
    {
      "name": "802.1x Expected authorization status",
      "description": "Matches 802.1x authorization status against expected port authorization status, based on the dot1x_port_control attribute assigned to the interface policy.  Returns true if status matches expected intent.  The status will be 'false' if the actual port is blocked, and port control was auto. The status will also be 'false' if the actual port is not blocked, and port control is force_unauthorized, because we expect the port to then be blocked."
    }
  ]
}