{"label": "Data_Plane - Overloaded interface bandwidth usage", "processors": [{"inputs": {}, "type": "if_counter", "name": "Interface Egress traffic", "outputs": {"out": "Egress_traffic"}, "properties": {"description": "str(interface.description or 'facing %s' % (system2.hostname or system2.label or system2.role))", "graph_query": "match(node('system', name='system', system_id=not_none(), deploy_mode='deploy', role=is_in(['leaf', 'spine', 'external_router'])).out('hosted_interfaces').node('interface', if_type=is_in(['ip','ethernet']), name='interface').out('link').node('link', name='link').in_('link').node('interface').in_('hosted_interfaces').node('system', name='system2')).ensure_different('system', 'system2')", "interface": "interface.if_name", "system_id": "system.system_id", "enable_streaming": false, "role": "str(link.role)", "speed": "str(link.speed)", "counter_type": "tx_bps"}}, {"inputs": {}, "type": "if_counter", "name": "Interface Ingress traffic", "outputs": {"out": "Ingress_traffic"}, "properties": {"description": "str(interface.description or 'facing %s' % (system2.hostname or system2.label or system2.role))", "graph_query": "match(node('system', name='system', system_id=not_none(), deploy_mode='deploy', role=is_in(['leaf', 'spine', 'external_router'])).out('hosted_interfaces').node('interface', if_type=is_in(['ip','ethernet']), name='interface').out('link').node('link', name='link').in_('link').node('interface').in_('hosted_interfaces').node('system', name='system2')).ensure_different('system', 'system2')", "interface": "interface.if_name", "system_id": "system.system_id", "enable_streaming": false, "role": "str(link.role)", "speed": "str(link.speed)", "counter_type": "rx_bps"}}, {"inputs": {"in": "Egress_traffic"}, "type": "range_check", "name": "Egress traffic exceeds threshold?", "outputs": {"out": "Egress_traffic_exceeds_threshold"}, "properties": {"graph_query": [], "anomaly_retention_size": 1073741824, "anomaly_retention_duration": 86400, "range": {"min": "int(functions.speed_to_bits(context.speed) * 10) // 100 + 1"}, "raise_anomaly": true, "enable_streaming": false, "property": "value", "enable_anomaly_logging": false}}, {"inputs": {"in": "Ingress_traffic"}, "type": "range_check", "name": "Ingress traffic exceeds threshold?", "outputs": {"out": "Ingress_traffic_exceeds_threshold"}, "properties": {"graph_query": [], "anomaly_retention_size": 1073741824, "anomaly_retention_duration": 86400, "range": {"min": "int(functions.speed_to_bits(context.speed) * 10) // 100 + 1"}, "raise_anomaly": true, "enable_streaming": false, "property": "value", "enable_anomaly_logging": false}}], "stages": [{"name": "Ingress_traffic", "retention_duration": 86400, "units": "bps"}, {"name": "Ingress_traffic_exceeds_threshold", "retention_duration": 86400}, {"name": "Egress_traffic_exceeds_threshold", "retention_duration": 86400}, {"name": "Egress_traffic", "retention_duration": 86400, "units": "bps"}], "disabled": true}