{
  "label": "External routes",
  "description": "External routes",
  "processors": [
    {
      "inputs": {},
      "type": "extensible_data_collector",
      "name": "external_routes",
      "outputs": {
        "out": "external_routes"
      },
      "properties": {
        "query_group_by": [
          "system"
        ],
        "data_type": "table_dss",
        "graph_query": [
          "node('system', name='system', role='leaf', system_id=not_none(),     deploy_mode=is_in(['deploy', 'drain'])).out('hosted_interfaces').node('interface', if_type=is_in(['loopback', 'ip']), name='system_if').out('protocol').node('protocol').in_('protocol').node('interface', if_type=is_in(['loopback', 'ip']), name='neighbor_if').ensure_different('system_if', 'neighbor_if').where(  lambda neighbor_if: bool(    neighbor_if.ipv4_addr or neighbor_if.ipv6_addr  ))",
          "node('system', name='system', role='leaf', system_id=not_none(),     deploy_mode=is_in(['deploy', 'drain'])).out('hosted_vn_instances').node('vn_instance').out('member_interfaces').node('interface', if_type='svi').out('protocol').node('protocol').in_('protocol').node('ip_endpoint', endpoint_type='vip', name='neighbor_if').where(  lambda neighbor_if: bool(    neighbor_if.ipv4_addr or neighbor_if.ipv6_addr  ))"
        ],
        "service_interval": "120",
        "keys": [],
        "service_name": "bgp_route",
        "execution_count": "1",
        "system_id": "system.system_id",
        "service_input": "\"\"",
        "enable_streaming": false,
        "value_map": {
          "1": "up"
        },
        "ingestion_filter": {
          "neighbor": {
            "type": "equals",
            "value": "[ip_addr.split('/')[0] for g in group_items for ip_addr in (g['neighbor_if'].ipv4_addr,                 g['neighbor_if'].ipv6_addr) if ip_addr]"
          }
        }
      }
    }
  ]
}