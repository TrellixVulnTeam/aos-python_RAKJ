{"label": "Maintenance - Drain traffic anomaly", "description": "Probe raises anomaly on drained nodes if there is excess traffic", "processors": [{"inputs": {}, "type": "if_counter", "name": "Collect ingress traffic", "outputs": {"out": "ingress_intf_traffic"}, "properties": {"description": "interface.description or ''", "graph_query": "node('system', system_id=not_none(), deploy_mode='drain', name='system').out('hosted_interfaces').node('interface', if_type=is_in(['ip','ethernet']), name='interface')", "interface": "interface.if_name", "system_id": "system.system_id", "enable_streaming": false, "counter_type": "rx_bps"}}, {"inputs": {"in": "ingress_intf_traffic"}, "type": "periodic_average", "name": "Average ingress traffic", "outputs": {"out": "average_ingress_intf_traffic"}, "properties": {"enable_streaming": false, "period": 60, "graph_query": []}}, {"inputs": {"in": "average_ingress_intf_traffic"}, "type": "range_check", "name": "Ingress traffic threshold", "outputs": {"out": "drain_traffic_threshold"}, "properties": {"enable_streaming": false, "property": "value", "range": {"min": 100001}, "raise_anomaly": false, "graph_query": []}}, {"inputs": {"in": "drain_traffic_threshold"}, "type": "match_count", "name": "Excess per system", "outputs": {"out": "excess_per_system"}, "properties": {"enable_streaming": false, "group_by": ["system_id"], "reference_state": "true"}}, {"inputs": {"in": "excess_per_system"}, "type": "range_check", "name": "Excess range", "outputs": {"out": "excess_range"}, "properties": {"enable_streaming": false, "property": "value", "range": {"min": 1}, "raise_anomaly": true, "graph_query": []}}], "stages": [{"name": "ingress_intf_traffic", "description": "Ingress traffic on interfaces specified by system_id and if_name", "units": "bps"}, {"name": "average_ingress_intf_traffic", "description": "Average ingress traffic on interfaces specified by system_id and if_name", "units": "bps"}], "disabled": true}