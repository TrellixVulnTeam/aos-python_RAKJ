{"label": "Multicast - Anycast RP Peer Count ", "processors": [{"inputs": {}, "type": "generic_data_collector", "name": "anycast rp processor", "outputs": {"out": "peer_count"}, "properties": {"graph_query": "match(node('security_zone', name='sz').in_('sz').node('multicast_policy').out('rp').node('rendezvous_point').out('anycast_interface').node('interface', name='anycast_ip').in_('hosted_interfaces').node('system', name='system'),node('system', name='system').out('hosted_sz_instances').node('sz_instance').in_('instantiated_by').node('security_zone', name='sz'))", "data_type": "ns", "service_interval": "120", "service_name": "anycast_rp", "execution_count": "-1", "system_id": "system.system_id", "service_input": "\"\"", "key": "'%s|%s|peer_count' % (sz.vrf_name, anycast_ip.ipv4_addr.split('/')[0])", "enable_streaming": false}}, {"inputs": {"in": "peer_count"}, "type": "range_check", "name": "peer count minimum", "outputs": {"out": "peer_count_below_min"}, "properties": {"enable_streaming": false, "property": "value", "range": {"max": 9}, "raise_anomaly": true, "graph_query": []}}, {"inputs": {"in": "peer_count_below_min"}, "type": "accumulate", "name": "Anycast RP Peer Count Anomaly History", "outputs": {"out": "anycast_rp_anomaly_history"}, "properties": {"enable_streaming": false, "max_samples": 50, "graph_query": [], "total_duration": 0}}], "disabled": true}