{
  "label": "Overloaded interface bandwidth usage",
  "processors": [
    {
      "inputs": {},
      "type": "if_counter",
      "name": "Interface Egress traffic",
      "outputs": {
        "out": "Egress_traffic"
      },
      "properties": {
        "description": "interface.description or 'facing %s' % (system2.hostname or system2.label or system2.role)",
        "graph_query": "match(node('system', name='system', system_id=not_none(), deploy_mode='deploy', role=is_in(['leaf', 'spine', 'external_router'])).out('hosted_interfaces').node('interface', if_type=is_in(['ip','ethernet']), name='interface').out('link').node('link', name='link', speed='10G').in_('link').node('interface').in_('hosted_interfaces').node('system', name='system2')).ensure_different('system', 'system2')",
        "interface": "interface.if_name",
        "role": "link.role",
        "enable_streaming": false,
        "system_id": "system.system_id",
        "counter_type": "tx_bps"
      }
    },
    {
      "inputs": {},
      "type": "if_counter",
      "name": "Interface Ingress traffic",
      "outputs": {
        "out": "Ingress_traffic"
      },
      "properties": {
        "description": "interface.description or 'facing %s' % (system2.hostname or system2.label or system2.role)",
        "graph_query": "match(node('system', name='system', system_id=not_none(), deploy_mode='deploy', role=is_in(['leaf', 'spine', 'external_router'])).out('hosted_interfaces').node('interface', if_type=is_in(['ip','ethernet']), name='interface').out('link').node('link', name='link', speed='10G').in_('link').node('interface').in_('hosted_interfaces').node('system', name='system2')).ensure_different('system', 'system2')",
        "interface": "interface.if_name",
        "role": "link.role",
        "enable_streaming": false,
        "system_id": "system.system_id",
        "counter_type": "rx_bps"
      }
    },
    {
      "inputs": {
        "in": "Egress_traffic"
      },
      "type": "range_check",
      "name": "Egress traffic exceeds threshold?",
      "outputs": {
        "out": "Egress_traffic_exceeds_threshold"
      },
      "properties": {
        "enable_streaming": false,
        "property": "value",
        "range": {
          "min": 1000000001
        },
        "raise_anomaly": true,
        "graph_query": []
      }
    },
    {
      "inputs": {
        "in": "Ingress_traffic"
      },
      "type": "range_check",
      "name": "Ingress traffic exceeds threshold?",
      "outputs": {
        "out": "Ingress_traffic_exceeds_threshold"
      },
      "properties": {
        "enable_streaming": false,
        "property": "value",
        "range": {
          "min": 1000000001
        },
        "raise_anomaly": true,
        "graph_query": []
      }
    },
    {
      "inputs": {
        "in": "Egress_traffic_exceeds_threshold"
      },
      "type": "accumulate",
      "name": "Anomaly history of Egress traffic exceeding threhold",
      "outputs": {
        "out": "Egress_traffic_exceeds_threshold_anomaly_history"
      },
      "properties": {
        "enable_streaming": false,
        "max_samples": 50,
        "graph_query": [],
        "total_duration": 0
      }
    },
    {
      "inputs": {
        "in": "Ingress_traffic_exceeds_threshold"
      },
      "type": "accumulate",
      "name": "Anomaly history of Ingress traffic exceeding threhold",
      "outputs": {
        "out": "Ingress_traffic_exceeds_threshold_anomaly_history"
      },
      "properties": {
        "enable_streaming": false,
        "max_samples": 50,
        "graph_query": [],
        "total_duration": 0
      }
    }
  ],
  "stages": [
    {
      "name": "Ingress_traffic",
      "units": "bps"
    },
    {
      "name": "Egress_traffic",
      "units": "bps"
    }
  ]
}